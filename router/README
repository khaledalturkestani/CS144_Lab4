SUID: khaled

Implementation Description:
If (packet has invalid length)
  drop it
If (packet is ARP)
  if (packet is for me && it's an ARP request)
    send ARP reply
  else if (packet is for me && it's an ARP reply)
    insert reply in ARP cache
    if (there are outstanding packets)
      send them
  else 
    drop packet

Else if (packet is IP)
  If (ip header checksum doesn't match)
    drop packet

  If in NAT mode
    call handle_nat_ip_packet()

  Else //Proceed like in lab1
    if (packet if for me)
      if (packet is ICMP ECHO request)
        send ECHO reply
      else if (packet is UDP or TCP)
        end PORT UNREACHABLE
      else 
        drop packet
    else  
      if (found match in routing table using LPM)
        if (found match in ARP cache)
	  forward packet to next hop
	else 
	  queue packet until ARP response comes.
      else 
	send DESTINATION NET UNREACHABLE
else
  drop packet.

------------------------------------

handle_nat_ip_packt() implementation details:

// Note we already know that the packet is IP and checked the packet length and IP checksum.

If packet for me // ip_dst is one of the router's IPs
  If not mapped // Then assume packet is addressed to NAT
    If Echo Request
      reply
    else if UDP or TCP
      send Port Unreachable
    else 
      drop
  Else // i.e. found mapping
    If not TCP & not ICMP
      drop

    If unsolicited SYN
      wait 6 seconds
    Rewrite headers
    If (found match in ARP cache)
      forward packet
    else 
      queue packet  
   
 
Else // ip_dst didn't match any of the router's IP's
  If LPM fails
    send ICMP Net Unreachable
  
  If incoming interface is "eth1" // i.e. internal packet.
    If outgoing iface is not "eth1" 
      If not mapped
        create mapping
      Rewrite headers
      If cached ARP exists  
	send packet
      Else 
	queue packet

-----------------------------------------------

Testing:
Tested traceroutes from one of the HTTP servers to any of my routers interfaces --> ICMP port unreachable seems to work.
Tested traceroutes from one server to another --> TTL Time Exceeded and Port Unreachable work.
Tested using a get request from a web brwoser to one of the servers --> ARP caching works. 
Tested by modifying the mask for eth3 to be 255.255.255.255 and performing a GET request fro mthe browser to one of the 
servers. --> Router correctly generated Destination Net Unreachable.
Tested by sending ARP requests through the wrong interface --> Destination Host Unreachable seems to work.

Challenging part:
Most challenging part was keeping track of the interface that the packet should be sent through
in different scenarios and maintaining the interface somewhere in memory. 

Bugs:
I think my code meets the assignment requirements.

